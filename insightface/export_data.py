import os
import pandas as pd
from datetime import datetime
import re

# T·∫°o DataFrame to√†n c·ª•c ƒë·ªÉ l∆∞u d·ªØ li·ªáu khu√¥n m·∫∑t
face_data = pd.DataFrame(columns=["Timestamp", "Name", "Recognition_prob", "Emotion", "Emotion_prob"])

def save_to_pandas(name, recognition_prob, emotion, emotion_prob, file_name="face_data.csv"):
    """
    L∆∞u d·ªØ li·ªáu khu√¥n m·∫∑t v√†o DataFrame Pandas v√† ghi b·ªï sung v√†o file CSV n·∫øu ƒë√£ t·ªìn t·∫°i.
    Args:
        name (str): T√™n ng∆∞·ªùi nh·∫≠n di·ªán ƒë∆∞·ª£c.
        recognition_prob (int): X√°c su·∫•t nh·∫≠n di·ªán.
        emotion (str): C·∫£m x√∫c ph√°t hi·ªán ƒë∆∞·ª£c.
        emotion_prob (float): X√°c su·∫•t c·ªßa c·∫£m x√∫c.
        file_name (str): T√™n file CSV ƒë·ªÉ ghi.
    """
    global face_data

    # Th√™m d·ªØ li·ªáu m·ªõi v√†o DataFrame
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_row = {
        "Timestamp": timestamp,
        "Name": name,
        "Recognition_prob": recognition_prob,
        "Emotion": emotion,
        "Emotion_prob": emotion_prob
    }

    # Ki·ªÉm tra n·∫øu `new_row` kh√¥ng r·ªóng ho·∫∑c to√†n b·ªô NaN
    if not pd.isna(pd.Series(new_row)).all():
        # Th√™m d√≤ng m·ªõi v√†o `face_data` m√† kh√¥ng d√πng `pd.concat`
        face_data.loc[len(face_data)] = new_row
        print(f"‚úÖ Data added: {new_row}")
    else:
        print("‚ö†Ô∏è Warning: Attempted to add an empty or NaN row. Skipped.")

    # Ki·ªÉm tra n·∫øu file CSV ƒë√£ t·ªìn t·∫°i
    if os.path.exists(file_name):
        # ƒê·ªçc d·ªØ li·ªáu c≈© v√† n·ªëi th√™m d·ªØ li·ªáu m·ªõi
        existing_data = pd.read_csv(file_name)
        combined_data = pd.concat([existing_data, pd.DataFrame([new_row])], ignore_index=True)
        combined_data.to_csv(file_name, index=False)
    else:
        # N·∫øu file ch∆∞a t·ªìn t·∫°i, ghi d·ªØ li·ªáu m·ªõi
        face_data.to_csv(file_name, index=False)

def filter_data(start_time, end_time, name, input_file="face_data.csv", output_file="filtered_data.csv"):
    """
    L·ªçc d·ªØ li·ªáu t·ª´ file CSV d·ª±a tr√™n th·ªùi gian v√† t√™n ng∆∞·ªùi, sau ƒë√≥ xu·∫•t ra file CSV m·ªõi.

    Args:
        start_time (str): Th·ªùi gian b·∫Øt ƒë·∫ßu l·ªçc (ƒë·ªãnh d·∫°ng "YYYY-MM-DD HH:MM" ho·∫∑c "YYYY-MM-DD HH:MM:SS").
        end_time (str): Th·ªùi gian k·∫øt th√∫c l·ªçc (ƒë·ªãnh d·∫°ng "YYYY-MM-DD HH:MM" ho·∫∑c "YYYY-MM-DD HH:MM:SS").
        name (str): T√™n ng∆∞·ªùi mu·ªën l·ªçc.
        input_file (str): T√™n file CSV ƒë·∫ßu v√†o.
        output_file (str): T√™n file CSV ƒë·ªÉ xu·∫•t d·ªØ li·ªáu l·ªçc ƒë∆∞·ª£c.
    """
    # Ki·ªÉm tra n·∫øu file CSV ƒë·∫ßu v√†o kh√¥ng t·ªìn t·∫°i
    try:
        data = pd.read_csv(input_file)
    except FileNotFoundError:
        print(f"‚ùå Input file '{input_file}' not found.")
        return

    # Ki·ªÉm tra n·∫øu file tr·ªëng ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu
    if data.empty:
        print(f"‚ùå Input file '{input_file}' is empty.")
        return

    # Chuy·ªÉn c·ªôt timestamp th√†nh ki·ªÉu datetime
    data['timestamp'] = pd.to_datetime(data['timestamp'])

    # L·∫•y ph·∫°m vi th·ªùi gian trong file
    min_time = data['timestamp'].min()
    max_time = data['timestamp'].max()

    # Th√™m gi√¢y v√†o th·ªùi gian n·∫øu c·∫ßn
    if len(start_time.split(":")) == 2:
        start_time += ":00"
    if len(end_time.split(":")) == 2:
        end_time += ":00"

    # Chuy·ªÉn th·ªùi gian ƒë·∫ßu v√†o th√†nh ki·ªÉu datetime
    try:
        start_time = pd.to_datetime(start_time)
        end_time = pd.to_datetime(end_time)
    except ValueError:
        print("‚ùå Invalid time format. Please use 'YYYY-MM-DD HH:MM' or 'YYYY-MM-DD HH:MM:SS'.")
        return

    # Ki·ªÉm tra n·∫øu th·ªùi gian n·∫±m trong ph·∫°m vi d·ªØ li·ªáu
    if start_time < min_time or end_time > max_time or start_time > end_time:
        print(f"‚ùå Invalid time range. Allowed range: {min_time} to {max_time}.")
        return

    # L·ªçc d·ªØ li·ªáu
    filtered_data = data[
        (data['timestamp'] >= start_time) &
        (data['timestamp'] <= end_time) &
        (data['name'] == name)
    ]

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p
    if filtered_data.empty:
        print(f"‚ÑπÔ∏è No data found for the given criteria: Name={name}, Time range={start_time} to {end_time}.")
        return

    # Xu·∫•t d·ªØ li·ªáu l·ªçc ƒë∆∞·ª£c ra file CSV
    filtered_data.to_csv(output_file, index=False)
    print(f"‚úÖ Filtered data exported to {output_file}.")

def analyze_emotions(start_time, end_time, name, input_file="face_data.csv"):
    """
    Ph√¢n t√≠ch c·∫£m x√∫c c·ªßa m·ªôt ng∆∞·ªùi trong kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (t√≠nh theo %).
    
    Args:
        start_time (str): Th·ªùi gian b·∫Øt ƒë·∫ßu l·ªçc (ƒë·ªãnh d·∫°ng "YYYY-MM-DD HH:MM" ho·∫∑c "YYYY-MM-DD HH:MM:SS").
        end_time (str): Th·ªùi gian k·∫øt th√∫c l·ªçc (ƒë·ªãnh d·∫°ng "YYYY-MM-DD HH:MM" ho·∫∑c "YYYY-MM-DD HH:MM:SS").
        name (str): T√™n ng∆∞·ªùi mu·ªën ph√¢n t√≠ch.
        input_file (str): T√™n file CSV ƒë·∫ßu v√†o.
    """
    # Ki·ªÉm tra n·∫øu file CSV ƒë·∫ßu v√†o kh√¥ng t·ªìn t·∫°i
    try:
        data = pd.read_csv(input_file)
    except FileNotFoundError:
        print(f"‚ùå Input file '{input_file}' not found.")
        return

    # Ki·ªÉm tra n·∫øu file tr·ªëng ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu
    if data.empty:
        print(f"‚ùå Input file '{input_file}' is empty.")
        return

    # Chuy·ªÉn c·ªôt timestamp th√†nh ki·ªÉu datetime
    data['timestamp'] = pd.to_datetime(data['timestamp'])

    # L·∫•y ph·∫°m vi th·ªùi gian trong file
    min_time = data['timestamp'].min()
    max_time = data['timestamp'].max()

    # Th√™m gi√¢y v√†o th·ªùi gian n·∫øu c·∫ßn
    if len(start_time.split(":")) == 2:
        start_time += ":00"
    if len(end_time.split(":")) == 2:
        end_time += ":00"

    # Chuy·ªÉn th·ªùi gian ƒë·∫ßu v√†o th√†nh ki·ªÉu datetime
    try:
        start_time = pd.to_datetime(start_time)
        end_time = pd.to_datetime(end_time)
    except ValueError:
        print("‚ùå Invalid time format. Please use 'YYYY-MM-DD HH:MM' or 'YYYY-MM-DD HH:MM:SS'.")
        return

    # Ki·ªÉm tra n·∫øu th·ªùi gian n·∫±m trong ph·∫°m vi d·ªØ li·ªáu
    if start_time < min_time or end_time > max_time or start_time > end_time:
        print(f"‚ùå Invalid time range. Allowed range: {min_time} to {max_time}.")
        return

    # L·ªçc d·ªØ li·ªáu
    filtered_data = data[
        (data['timestamp'] >= start_time) &
        (data['timestamp'] <= end_time) &
        (data['name'] == name) &
        (data['emotion_prob'] > 60)  # Ch·ªâ l·∫•y c·∫£m x√∫c c√≥ x√°c su·∫•t > 60
    ]

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p
    if filtered_data.empty:
        print(f"‚ÑπÔ∏è No significant emotions found for {name} in the range {start_time} to {end_time}.")
        return

    # T√≠nh t·ªïng x√°c su·∫•t cho m·ªói c·∫£m x√∫c
    emotion_summary = filtered_data.groupby('emotion')['emotion_prob'].sum()

    # T√≠nh t·ªïng t·∫•t c·∫£ c·∫£m x√∫c
    total_emotion_prob = emotion_summary.sum()

    # Chuy·ªÉn sang % d·ª±a tr√™n t·ªïng c√°c c·∫£m x√∫c
    emotion_percentages = (emotion_summary / total_emotion_prob * 100).sort_values(ascending=False)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print(f"\nEmotion analysis for {name} from {start_time} to {end_time}:")
    print(emotion_percentages.apply(lambda x: f"{x:.2f}%").to_string(index=True))  # Lo·∫°i b·ªè 'Name' v√† 'dtype'

    # Suy lu·∫≠n c·∫£m x√∫c ch√≠nh
    dominant_emotion = emotion_percentages.idxmax()
    dominant_percentage = emotion_percentages.max()
    print(f"üßê Dominant emotion: {dominant_emotion} ({dominant_percentage:.2f}%).")

def parse_face_data(text):
    """
    X·ª≠ l√Ω chu·ªói vƒÉn b·∫£n v√† tr√≠ch xu·∫•t th√¥ng tin <T√™n> <X√°c su·∫•t> <C·∫£m x√∫c> <X√°c su·∫•t>.
    Args:
        text (str): Chu·ªói vƒÉn b·∫£n ƒë·∫ßu v√†o, v√≠ d·ª• "quyet 66% | Neutral 92%".
    Returns:
        tuple: (name, recognition_prob, emotion, emotion_prob) n·∫øu h·ª£p l·ªá, ho·∫∑c None n·∫øu kh√¥ng h·ª£p l·ªá.
    """
    # Ki·ªÉm tra n·∫øu text kh√¥ng ph·∫£i l√† chu·ªói
    if not isinstance(text, str):
        return None

    # S·ª≠ d·ª•ng regex ƒë·ªÉ tr√≠ch xu·∫•t t√™n, x√°c su·∫•t nh·∫≠n di·ªán, c·∫£m x√∫c v√† x√°c su·∫•t c·∫£m x√∫c
    match = re.match(r"(\w+)\s(\d+)%\s\|\s(\w+)\s(\d+)%", text)
    if match:
        name = match.group(1)  # T√™n
        recognition_prob = int(match.group(2))  # X√°c su·∫•t nh·∫≠n di·ªán (d·∫°ng s·ªë nguy√™n)
        emotion = match.group(3)  # C·∫£m x√∫c
        emotion_prob = int(match.group(4))  # X√°c su·∫•t c·∫£m x√∫c (d·∫°ng s·ªë nguy√™n)
        return name, recognition_prob, emotion, emotion_prob
    else:
        return None